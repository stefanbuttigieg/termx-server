plugins {
  id("com.github.johnrengelman.shadow") version "7.1.0"
  id("application")
}

dependencies {
  annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
  annotationProcessor "io.micronaut:micronaut-inject-java"
  annotationProcessor "io.micronaut.openapi:micronaut-openapi"
  annotationProcessor "io.micronaut.spring:micronaut-spring-annotation"

  implementation project(':termserver-api')
  implementation project(':termserver-common')
  implementation project(':terminology')
  implementation project(':snomed')
  implementation project(':ucum')
  implementation project(':observation-definition')
  implementation project(':thesaurus')

  implementation project(':edition-int')
  implementation project(':edition-est')
  implementation project(':edition-uzb')

  implementation("com.kodality.commons:commons-util:${rootProject.commonsVersion}")
  implementation("com.kodality.commons:commons-db-core:${rootProject.commonsVersion}") { changing = true }
  implementation("com.kodality.commons:commons-db:${rootProject.commonsVersion}")
  implementation("com.kodality.commons:commons-http-client:${rootProject.commonsVersion}")
  implementation("com.kodality.commons:commons-cache:${rootProject.commonsVersion}") { changing = true }
  implementation("com.kodality.commons:commons-micronaut:${rootProject.commonsMicronautVersion}") { changing = true }
  implementation("com.kodality.commons:commons-micronaut-pg:${rootProject.commonsMicronautVersion}") { changing = true }
  implementation("com.kodality.zmei:zmei-fhir:${rootProject.zmeiVersion}") { changing = true }
  implementation("com.kodality.zmei:zmei-fhir-client:${rootProject.zmeiVersion}") { changing = true }
  implementation("com.kodality.zmei:zmei-fhir-jackson:${rootProject.zmeiVersion}") { changing = true }

  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${rootProject.jacksonVersion}")
  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${rootProject.jacksonVersion}")
  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${rootProject.jacksonVersion}")
  implementation("com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${rootProject.jacksonVersion}")


  implementation "org.apache.commons:commons-io:1.3.2"
  implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'

  implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
  implementation("io.micronaut:micronaut-inject")
  implementation("io.micronaut:micronaut-validation")
  implementation("io.micronaut:micronaut-runtime")
  implementation("io.micronaut:micronaut-management")
  implementation("io.micronaut:micronaut-http-server-netty")
  implementation("io.micronaut.spring:micronaut-spring")
  implementation("io.micronaut.liquibase:micronaut-liquibase")
  implementation("com.github.slugify:slugify:3.0.2")

  implementation('org.liquibase:liquibase-core:4.16.1')
  implementation("io.reactivex.rxjava2:rxjava:2.2.21")
  implementation("io.swagger.core.v3:swagger-annotations")
  implementation("io.micronaut.openapi:micronaut-openapi:4.8.7")
  implementation("com.univocity:univocity-parsers:2.9.1")
  implementation("com.auth0:java-jwt:4.0.0")
  implementation('com.auth0:jwks-rsa:0.21.2')
  implementation("io.github.furstenheim:copy_down:1.1")
  implementation('org.commonmark:commonmark:0.19.0')


  testCompileOnly("org.projectlombok:lombok:1.18.24")
  testAnnotationProcessor("org.projectlombok:lombok:1.18.22")
  testImplementation("io.micronaut.test:micronaut-test-spock:3.4.0")
  testImplementation("org.spockframework:spock-core:2.1-groovy-3.0") {
    exclude group: "org.codehaus.groovy", module: "groovy-all"
  }
  testImplementation("org.codehaus.groovy:groovy-sql:3.0.11")
  testImplementation("org.apache.commons:commons-lang3:3.12.0")
  testImplementation("org.testcontainers:postgresql")
  testImplementation("org.testcontainers:spock")
  testImplementation("org.testcontainers:testcontainers")
  testImplementation("commons-io:commons-io:2.11.0")
}

application {
  mainClass.set("com.kodality.termserver.TerminologyServerApplication")
}

shadowJar {
  zip64 true
  mergeServiceFiles()
}

run {
  if (project.hasProperty('debug')) {
    jvmArgs += ['-Xdebug', "-Xrunjdwp:transport=dt_socket,address=" + project.getProperty('debug') + ",server=y,suspend=n"]
  }
  if (project.hasProperty('dev')) {
    jvmArgs += ['-Dauth.dev.allowed=true', '-Dmicronaut.environments=dev']
  }
}
