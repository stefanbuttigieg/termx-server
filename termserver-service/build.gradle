plugins {
  id("com.github.johnrengelman.shadow") version "7.1.0"
  id("io.micronaut.application") version "2.0.8"
  id("org.liquibase.gradle") version "2.0.4"
}

apply from: "build-liquibase.gradle"

version = "0.1"
group = "com.kodality.termserver.service"

repositories {
  mavenCentral()
}

micronaut {
  runtime("netty")
  testRuntime("spock2")
  processing {
    incremental(true)
    annotations("com.kodality.termserver.*")
  }
}

run {
  if (project.hasProperty('debug')) {
    jvmArgs += ['-Xdebug', "-Xrunjdwp:transport=dt_socket,address=" + project.getProperty('debug') + ",server=y,suspend=n"]
  }
}

dependencies {
  annotationProcessor("io.micronaut:micronaut-http-validation")
  annotationProcessor("io.micronaut:micronaut-inject-java")
  annotationProcessor("io.micronaut.spring:micronaut-spring-annotation")

  implementation project(':termserver-api')
  implementation project(':termserver-commons:commons-util')
  implementation project(':termserver-commons:commons-model')
  implementation project(':termserver-commons:commons-db')
  implementation project(':termserver-commons:commons-http-client')

  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${rootProject.jacksonVersion}")
  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${rootProject.jacksonVersion}")
  implementation("com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${rootProject.jacksonVersion}")
  implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${rootProject.jacksonVersion}")

  implementation "org.apache.commons:commons-io:1.3.2"
  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'org.apache.commons:commons-text:1.9'
  implementation 'commons-io:commons-io:2.11.0'

  implementation("io.micronaut:micronaut-http:${rootProject.micronautVersion}")
  implementation("io.micronaut:micronaut-validation:${rootProject.micronautVersion}")
  implementation("io.micronaut:micronaut-http-client")
  implementation("io.micronaut:micronaut-http-server")
  implementation("io.micronaut:micronaut-runtime")
  implementation("io.micronaut.liquibase:micronaut-liquibase") {
    exclude group: "org.liquibase"
  }
  implementation("org.liquibase:liquibase-core:4.9.0")
  implementation("io.micronaut.sql:micronaut-jdbc-hikari")
  implementation("io.micronaut.spring:micronaut-spring")
  implementation("javax.annotation:javax.annotation-api")
  implementation("io.micronaut:micronaut-validation")
  implementation("io.micronaut:micronaut-inject-java")
  implementation("org.springframework:spring-jdbc:5.3.17")
  implementation("org.postgresql:postgresql:42.3.3")

  testCompileOnly("org.projectlombok:lombok:1.18.22")
  testAnnotationProcessor("org.projectlombok:lombok:1.18.22")
  testImplementation("io.micronaut.test:micronaut-test-spock:3.1.1")
  testImplementation("org.spockframework:spock-core:2.1-groovy-3.0") {
    exclude group: "org.codehaus.groovy", module: "groovy-all"
  }
  testImplementation("org.codehaus.groovy:groovy-sql:3.0.10")
  testImplementation("org.apache.commons:commons-lang3:3.12.0")
  testImplementation("org.testcontainers:postgresql")
  testImplementation("org.testcontainers:spock")
  testImplementation("org.testcontainers:testcontainers")
  testImplementation("commons-io:commons-io:2.11.0")
}

application {
  mainClass.set("com.kodality.termserver.TerminologyServerApplication")
}
